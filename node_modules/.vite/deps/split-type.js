import "./chunk-RSJERJUL.js";

// node_modules/split-type/dist/index.js
(() => {
  function append(...nodes) {
    const length = nodes.length;
    for (let i = 0; i < length; i++) {
      const node = nodes[i];
      if (node.nodeType === 1 || node.nodeType === 11)
        this.appendChild(node);
      else
        this.appendChild(document.createTextNode(String(node)));
    }
  }
  function replaceChildren(...nodes) {
    while (this.lastChild) {
      this.removeChild(this.lastChild);
    }
    if (nodes.length)
      this.append(...nodes);
  }
  function replaceWith(...nodes) {
    const parent = this.parentNode;
    let i = nodes.length;
    if (!parent)
      return;
    if (!i)
      parent.removeChild(this);
    while (i--) {
      let node = nodes[i];
      if (typeof node !== "object") {
        node = this.ownerDocument.createTextNode(node);
      } else if (node.parentNode) {
        node.parentNode.removeChild(node);
      }
      if (!i) {
        parent.replaceChild(node, this);
      } else {
        parent.insertBefore(this.previousSibling, node);
      }
    }
  }
  if (typeof Element !== "undefined") {
    if (!Element.prototype.append) {
      Element.prototype.append = append;
      DocumentFragment.prototype.append = append;
    }
    if (!Element.prototype.replaceChildren) {
      Element.prototype.replaceChildren = replaceChildren;
      DocumentFragment.prototype.replaceChildren = replaceChildren;
    }
    if (!Element.prototype.replaceWith) {
      Element.prototype.replaceWith = replaceWith;
      DocumentFragment.prototype.replaceWith = replaceWith;
    }
  }
})();
function extend(target, object) {
  return Object.getOwnPropertyNames(Object(target)).reduce((extended, key) => {
    const currentValue = Object.getOwnPropertyDescriptor(Object(target), key);
    const newValue = Object.getOwnPropertyDescriptor(Object(object), key);
    return Object.defineProperty(extended, key, newValue || currentValue);
  }, {});
}
function isString(value) {
  return typeof value === "string";
}
function isArray(value) {
  return Array.isArray(value);
}
function parseSettings(settings = {}) {
  const object = extend(settings);
  let types;
  if (object.types !== void 0) {
    types = object.types;
  } else if (object.split !== void 0) {
    types = object.split;
  }
  if (types !== void 0) {
    object.types = (isString(types) || isArray(types) ? String(types) : "").split(",").map((type) => String(type).trim()).filter((type) => /((line)|(word)|(char))/i.test(type));
  }
  if (object.absolute || object.position) {
    object.absolute = object.absolute || /absolute/.test(settings.position);
  }
  return object;
}
function parseTypes(value) {
  const types = isString(value) || isArray(value) ? String(value) : "";
  return {
    none: !types,
    lines: /line/i.test(types),
    words: /word/i.test(types),
    chars: /char/i.test(types)
  };
}
function isObject(value) {
  return value !== null && typeof value === "object";
}
function isNode(input) {
  return isObject(input) && /^(1|3|11)$/.test(input.nodeType);
}
function isLength(value) {
  return typeof value === "number" && value > -1 && value % 1 === 0;
}
function isArrayLike(value) {
  return isObject(value) && isLength(value.length);
}
function toArray(value) {
  if (isArray(value))
    return value;
  if (value == null)
    return [];
  return isArrayLike(value) ? Array.prototype.slice.call(value) : [value];
}
function getTargetElements(target) {
  let elements = target;
  if (isString(target)) {
    if (/^(#[a-z]\w+)$/.test(target.trim())) {
      elements = document.getElementById(target.trim().slice(1));
    } else {
      elements = document.querySelectorAll(target);
    }
  }
  return toArray(elements).reduce((result, element) => {
    return [...result, ...toArray(element).filter(isNode)];
  }, []);
}
var {
  entries,
  keys,
  values
} = Object;
var expando = `_splittype`;
var cache = {};
var uid = 0;
function set(owner, key, value) {
  if (!isObject(owner)) {
    console.warn("[data.set] owner is not an object");
    return null;
  }
  const id = owner[expando] || (owner[expando] = ++uid);
  const data = cache[id] || (cache[id] = {});
  if (value === void 0) {
    if (!!key && Object.getPrototypeOf(key) === Object.prototype) {
      cache[id] = {
        ...data,
        ...key
      };
    }
  } else if (key !== void 0) {
    data[key] = value;
  }
  return value;
}
function get(owner, key) {
  const id = isObject(owner) ? owner[expando] : null;
  const data = id && cache[id] || {};
  if (key === void 0) {
    return data;
  }
  return data[key];
}
function remove(element) {
  const id = element && element[expando];
  if (id) {
    delete element[id];
    delete cache[id];
  }
}
function cleanup() {
  entries(cache).forEach(([id, {
    isRoot,
    isSplit
  }]) => {
    if (!isRoot || !isSplit) {
      cache[id] = null;
      delete cache[id];
    }
  });
}
function toWords(value, separator = " ") {
  const string = value ? String(value) : "";
  return string.trim().replace(/\s+/g, " ").split(separator);
}
var rsAstralRange = "\\ud800-\\udfff";
var rsComboMarksRange = "\\u0300-\\u036f\\ufe20-\\ufe23";
var rsComboSymbolsRange = "\\u20d0-\\u20f0";
var rsVarRange = "\\ufe0e\\ufe0f";
var rsAstral = `[${rsAstralRange}]`;
var rsCombo = `[${rsComboMarksRange}${rsComboSymbolsRange}]`;
var rsFitz = "\\ud83c[\\udffb-\\udfff]";
var rsModifier = `(?:${rsCombo}|${rsFitz})`;
var rsNonAstral = `[^${rsAstralRange}]`;
var rsRegional = "(?:\\ud83c[\\udde6-\\uddff]){2}";
var rsSurrPair = "[\\ud800-\\udbff][\\udc00-\\udfff]";
var rsZWJ = "\\u200d";
var reOptMod = `${rsModifier}?`;
var rsOptVar = `[${rsVarRange}]?`;
var rsOptJoin = "(?:" + rsZWJ + "(?:" + [rsNonAstral, rsRegional, rsSurrPair].join("|") + ")" + rsOptVar + reOptMod + ")*";
var rsSeq = rsOptVar + reOptMod + rsOptJoin;
var rsSymbol = `(?:${[`${rsNonAstral}${rsCombo}?`, rsCombo, rsRegional, rsSurrPair, rsAstral].join("|")}
)`;
var reUnicode = RegExp(`${rsFitz}(?=${rsFitz})|${rsSymbol}${rsSeq}`, "g");
var unicodeRange = [rsZWJ, rsAstralRange, rsComboMarksRange, rsComboSymbolsRange, rsVarRange];
var reHasUnicode = RegExp(`[${unicodeRange.join("")}]`);
function asciiToArray(string) {
  return string.split("");
}
function hasUnicode(string) {
  return reHasUnicode.test(string);
}
function unicodeToArray(string) {
  return string.match(reUnicode) || [];
}
function stringToArray(string) {
  return hasUnicode(string) ? unicodeToArray(string) : asciiToArray(string);
}
function toString(value) {
  return value == null ? "" : String(value);
}
function toChars(string, separator = "") {
  string = toString(string);
  if (string && isString(string)) {
    if (!separator && hasUnicode(string)) {
      return stringToArray(string);
    }
  }
  return string.split(separator);
}
function createElement(name, attributes) {
  const element = document.createElement(name);
  if (!attributes) {
    return element;
  }
  Object.keys(attributes).forEach((attribute) => {
    const rawValue = attributes[attribute];
    const value = isString(rawValue) ? rawValue.trim() : rawValue;
    if (value === null || value === "")
      return;
    if (attribute === "children") {
      element.append(...toArray(value));
    } else {
      element.setAttribute(attribute, value);
    }
  });
  return element;
}
var defaults = {
  splitClass: "",
  lineClass: "line",
  wordClass: "word",
  charClass: "char",
  types: ["lines", "words", "chars"],
  absolute: false,
  tagName: "div"
};
function splitWordsAndChars(textNode, settings) {
  settings = extend(defaults, settings);
  const types = parseTypes(settings.types);
  const TAG_NAME = settings.tagName;
  const VALUE = textNode.nodeValue;
  const splitText = document.createDocumentFragment();
  let words = [];
  let chars = [];
  if (/^\s/.test(VALUE)) {
    splitText.append(" ");
  }
  words = toWords(VALUE).reduce((result, WORD, idx, arr) => {
    let wordElement;
    let characterElementsForCurrentWord;
    if (types.chars) {
      characterElementsForCurrentWord = toChars(WORD).map((CHAR) => {
        const characterElement = createElement(TAG_NAME, {
          class: `${settings.splitClass} ${settings.charClass}`,
          style: "display: inline-block;",
          children: CHAR
        });
        set(characterElement, "isChar", true);
        chars = [...chars, characterElement];
        return characterElement;
      });
    }
    if (types.words || types.lines) {
      wordElement = createElement(TAG_NAME, {
        class: `${settings.wordClass} ${settings.splitClass}`,
        style: `display: inline-block; ${types.words && settings.absolute ? `position: relative;` : ""}`,
        children: types.chars ? characterElementsForCurrentWord : WORD
      });
      set(wordElement, {
        isWord: true,
        isWordStart: true,
        isWordEnd: true
      });
      splitText.appendChild(wordElement);
    } else {
      characterElementsForCurrentWord.forEach((characterElement) => {
        splitText.appendChild(characterElement);
      });
    }
    if (idx < arr.length - 1) {
      splitText.append(" ");
    }
    return types.words ? result.concat(wordElement) : result;
  }, []);
  if (/\s$/.test(VALUE)) {
    splitText.append(" ");
  }
  textNode.replaceWith(splitText);
  return {
    words,
    chars
  };
}
function split(node, settings) {
  const type = node.nodeType;
  const wordsAndChars = {
    words: [],
    chars: []
  };
  if (!/(1|3|11)/.test(type)) {
    return wordsAndChars;
  }
  if (type === 3 && /\S/.test(node.nodeValue)) {
    return splitWordsAndChars(node, settings);
  }
  const childNodes = toArray(node.childNodes);
  if (childNodes.length) {
    set(node, "isSplit", true);
    if (!get(node).isRoot) {
      node.style.display = "inline-block";
      node.style.position = "relative";
      const nextSibling = node.nextSibling;
      const prevSibling = node.previousSibling;
      const text = node.textContent || "";
      const textAfter = nextSibling ? nextSibling.textContent : " ";
      const textBefore = prevSibling ? prevSibling.textContent : " ";
      set(node, {
        isWordEnd: /\s$/.test(text) || /^\s/.test(textAfter),
        isWordStart: /^\s/.test(text) || /\s$/.test(textBefore)
      });
    }
  }
  return childNodes.reduce((result, child) => {
    const {
      words,
      chars
    } = split(child, settings);
    return {
      words: [...result.words, ...words],
      chars: [...result.chars, ...chars]
    };
  }, wordsAndChars);
}
function getPosition(node, isWord, settings, scrollPos) {
  if (!settings.absolute) {
    return {
      top: isWord ? node.offsetTop : null
    };
  }
  const parent = node.offsetParent;
  const [scrollX, scrollY] = scrollPos;
  let parentX = 0;
  let parentY = 0;
  if (parent && parent !== document.body) {
    const parentRect = parent.getBoundingClientRect();
    parentX = parentRect.x + scrollX;
    parentY = parentRect.y + scrollY;
  }
  const {
    width,
    height,
    x,
    y
  } = node.getBoundingClientRect();
  const top = y + scrollY - parentY;
  const left = x + scrollX - parentX;
  return {
    width,
    height,
    top,
    left
  };
}
function unSplitWords(element) {
  if (!get(element).isWord) {
    toArray(element.children).forEach((child) => unSplitWords(child));
  } else {
    remove(element);
    element.replaceWith(...element.childNodes);
  }
}
var createFragment = () => document.createDocumentFragment();
function repositionAfterSplit(element, settings, scrollPos) {
  const types = parseTypes(settings.types);
  const TAG_NAME = settings.tagName;
  const nodes = element.getElementsByTagName("*");
  const wordsInEachLine = [];
  let wordsInCurrentLine = [];
  let lineOffsetY = null;
  let elementHeight;
  let elementWidth;
  let contentBox;
  let lines = [];
  const parent = element.parentElement;
  const nextSibling = element.nextElementSibling;
  const splitText = createFragment();
  const cs = window.getComputedStyle(element);
  const align = cs.textAlign;
  const fontSize = parseFloat(cs.fontSize);
  const lineThreshold = fontSize * 0.2;
  if (settings.absolute) {
    contentBox = {
      left: element.offsetLeft,
      top: element.offsetTop,
      width: element.offsetWidth
    };
    elementWidth = element.offsetWidth;
    elementHeight = element.offsetHeight;
    set(element, {
      cssWidth: element.style.width,
      cssHeight: element.style.height
    });
  }
  toArray(nodes).forEach((node) => {
    const isWordLike = node.parentElement === element;
    const {
      width,
      height,
      top,
      left
    } = getPosition(node, isWordLike, settings, scrollPos);
    if (/^br$/i.test(node.nodeName))
      return;
    if (types.lines && isWordLike) {
      if (lineOffsetY === null || top - lineOffsetY >= lineThreshold) {
        lineOffsetY = top;
        wordsInEachLine.push(wordsInCurrentLine = []);
      }
      wordsInCurrentLine.push(node);
    }
    if (settings.absolute) {
      set(node, {
        top,
        left,
        width,
        height
      });
    }
  });
  if (parent) {
    parent.removeChild(element);
  }
  if (types.lines) {
    lines = wordsInEachLine.map((wordsInThisLine) => {
      const lineElement = createElement(TAG_NAME, {
        class: `${settings.splitClass} ${settings.lineClass}`,
        style: `display: block; text-align: ${align}; width: 100%;`
      });
      set(lineElement, "isLine", true);
      const lineDimensions = {
        height: 0,
        top: 1e4
      };
      splitText.appendChild(lineElement);
      wordsInThisLine.forEach((wordOrElement, idx, arr) => {
        const {
          isWordEnd,
          top,
          height
        } = get(wordOrElement);
        const next = arr[idx + 1];
        lineDimensions.height = Math.max(lineDimensions.height, height);
        lineDimensions.top = Math.min(lineDimensions.top, top);
        lineElement.appendChild(wordOrElement);
        if (isWordEnd && get(next).isWordStart) {
          lineElement.append(" ");
        }
      });
      if (settings.absolute) {
        set(lineElement, {
          height: lineDimensions.height,
          top: lineDimensions.top
        });
      }
      return lineElement;
    });
    if (!types.words) {
      unSplitWords(splitText);
    }
    element.replaceChildren(splitText);
  }
  if (settings.absolute) {
    element.style.width = `${element.style.width || elementWidth}px`;
    element.style.height = `${elementHeight}px`;
    toArray(nodes).forEach((node) => {
      const {
        isLine,
        top,
        left,
        width,
        height
      } = get(node);
      const parentData = get(node.parentElement);
      const isChildOfLineNode = !isLine && parentData.isLine;
      node.style.top = `${isChildOfLineNode ? top - parentData.top : top}px`;
      node.style.left = isLine ? `${contentBox.left}px` : `${left - (isChildOfLineNode ? contentBox.left : 0)}px`;
      node.style.height = `${height}px`;
      node.style.width = isLine ? `${contentBox.width}px` : `${width}px`;
      node.style.position = "absolute";
    });
  }
  if (parent) {
    if (nextSibling)
      parent.insertBefore(element, nextSibling);
    else
      parent.appendChild(element);
  }
  return lines;
}
var _defaults = extend(defaults, {});
var SplitType = class {
  /**
   * The internal data store
   */
  static get data() {
    return cache;
  }
  /**
   * The default settings for all splitType instances
   * @static
   */
  static get defaults() {
    return _defaults;
  }
  /**
   * Sets the default settings for all SplitType instances.
   *
   * Setting `SplitType.defaults` to an object will merge that object with the
   * existing defaults.
   *
   * @param {Object} settings an object containing the settings to override
   * @deprecated
   * @static
   * @example
   * SplitType.defaults = { "position": "absolute" }
   */
  static set defaults(options) {
    _defaults = extend(_defaults, parseSettings(options));
  }
  /**
   * Sets the default settings for all SplitType instances.
   * The provided object will be merged with the existing defaults objects.
   *
   * @param {Object} settings an object containing the settings to override
   * @returns {Object} the new default settings
   * @public
   * @static
   * @example
   * SplitType.setDefaults({ "position": "absolute" })
   */
  static setDefaults(options) {
    _defaults = extend(_defaults, parseSettings(options));
    return defaults;
  }
  /**
   * Revert target elements to their original html content
   * Has no effect on that
   *
   * @param {any} elements The target elements to revert. One of:
   *  - {string} A css selector
   *  - {HTMLElement} A single element
   * -  {NodeList} A NodeList or collection
   *  - {HTMLElement[]} An array of Elements
   * -  {Array<HTMLElement|NodeList|HTMLElement[]>} A nested array of elements
   * @static
   */
  static revert(elements) {
    getTargetElements(elements).forEach((element) => {
      const {
        isSplit,
        html,
        cssWidth,
        cssHeight
      } = get(element);
      if (isSplit) {
        element.innerHTML = html;
        element.style.width = cssWidth || "";
        element.style.height = cssHeight || "";
        remove(element);
      }
    });
  }
  /**
   * Creates a new SplitType instance
   * This static method provides a way to create a `SplitType` instance without
   * using the `new` keyword.
   *
   * @param {any} target The target elements to split. One of:
   *  - {string} A css selector
   *  - {HTMLElement} A single element
   * -  {NodeList} A NodeList or collection
   *  - {HTMLElement[]} An array of Elements
   * -  {Array<HTMLElement|NodeList|HTMLElement[]>} A nested array of elements
   * @param {Object} [options] Settings for the SplitType instance
   * @return {SplitType} the SplitType instance
   * @static
   */
  static create(target, options) {
    return new SplitType(target, options);
  }
  /**
   * Creates a new `SplitType` instance
   *
   * @param {any} elements The target elements to split. One of:
   *  - {string} A css selector
   *  - {HTMLElement} A single element
   * -  {NodeList} A NodeList or collection
   *  - {HTMLElement[]} An array of Elements
   * -  {Array<HTMLElement|NodeList|HTMLElement[]>} A nested array of elements
   * @param {Object} [options] Settings for the SplitType instance
   */
  constructor(elements, options) {
    this.isSplit = false;
    this.settings = extend(_defaults, parseSettings(options));
    this.elements = getTargetElements(elements);
    this.split();
  }
  /**
   * Splits the text in all target elements. This method is called
   * automatically when a new SplitType instance is created. It can also be
   * called manually to re-split text with new options.
   * @param {Object} options
   * @public
   */
  split(options) {
    this.revert();
    this.elements.forEach((element) => {
      set(element, "html", element.innerHTML);
    });
    this.lines = [];
    this.words = [];
    this.chars = [];
    const scrollPos = [window.pageXOffset, window.pageYOffset];
    if (options !== void 0) {
      this.settings = extend(this.settings, parseSettings(options));
    }
    const types = parseTypes(this.settings.types);
    if (types.none) {
      return;
    }
    this.elements.forEach((element) => {
      set(element, "isRoot", true);
      const {
        words,
        chars
      } = split(element, this.settings);
      this.words = [...this.words, ...words];
      this.chars = [...this.chars, ...chars];
    });
    this.elements.forEach((element) => {
      if (types.lines || this.settings.absolute) {
        const lines = repositionAfterSplit(element, this.settings, scrollPos);
        this.lines = [...this.lines, ...lines];
      }
    });
    this.isSplit = true;
    window.scrollTo(scrollPos[0], scrollPos[1]);
    cleanup();
  }
  /**
   * Reverts target element(s) back to their original html content
   * Deletes all stored data associated with the target elements
   * Resets the properties on the splitType instance
   *
   * @public
   */
  revert() {
    if (this.isSplit) {
      this.lines = null;
      this.words = null;
      this.chars = null;
      this.isSplit = false;
    }
    SplitType.revert(this.elements);
  }
};
export {
  SplitType as default
};
//# sourceMappingURL=split-type.js.map
